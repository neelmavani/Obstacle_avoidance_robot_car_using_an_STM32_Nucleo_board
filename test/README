# 7058CEM-2324JANMAY-mahajanp3-bouzidiw-mavanin-coursework
7058CEM-2324JANMAY Embedded Systems Programming Coursework (Paras- 14324134, Walid-14054035, Neel-14081293)

## A two-wheel drive robot with autonomous mode for obstacle avoidance and Bluetooth control mode for manual operation.

The embedded system designed is a two-wheel drive robot car which operates in two modes. The robot has default autonomous mode of obstacle avoidance. It can be changed to manual mode in which the robot can be controlled remotely by an android phone with Bluetooth connectivity. STM32 Nucleo F446RE target board controls the functionality of the system. The system utilizes three Infrared sensors to measure distances front, left & right and as per the sensor values makes autonomous decisions to avoid the obstacles. The wheels are two PWM controlled DC motors interfaced with H-bridge motor drive to set the direction of rotation. For manual mode, the robot has a Bluetooth module which communicates wirelessly with user's android phone.The module sends the received commands to the target board using UART communication. The robot is intended to achieve the objectives of autonomous functioning by demonstrating successful avoiding obstacles around it and features of wireless control and communication using Bluetooth technology. 

## Hardware Design for the system
The essential components required to develop this project are listed below.
#### 1 Embedded Target Board
STM32 Nucleo F446RE board based on ARM Cortex-M4 32-bit MCU
[STM32 Nucleo Datasheet](https://www.st.com/resource/en/datasheet/stm32f446re.pdf)
#### 2 Sensors
Three GP2Y0A21YK0F Infrared distance measuring sensors with 10 cm to 80 cm measuring distance range.
[GP2Y0A21YK0F Datasheet](https://global.sharp/products/device/lineup/data/pdf/datasheet/gp2y0a21yk_e.pdf)
#### 3 Actuators
Two 6V DC motors
#### 4 Accessory modules 
1.	L298N Dual H-bridge motor driver module.
[L298 DUAL FULL-BRIDGE DRIVER IC Datasheet](https://www.sparkfun.com/datasheets/Robotics/L298_H_Bridge.pdf)
[L298 DUAL FULL-BRIDGE DRIVER Moduel Datasheet](https://www.handsontec.com/dataspecs/L298N%20Motor%20Driver.pdf)
2.	HC-05 Bluetooth to serial module.
[HC-05 Datasheet](https://components101.com/sites/default/files/component_datasheet/HC-05%20Datasheet.pdf)
#### 5 Batteries
#### 6 Body of the robot car
1. Rear wheels: Two plastic wheels with rubber tires.
2. Front wheel: One small cattle eye wheel.
3. Gearbox: One Gearbox for each motor
4. Battery holder: To hold tow batteries.
5. Chassis: An acrylic chassis
6. Breadboard: A small breadboard.
#### 7 Accessory components
1. Single Pole Double Throw switch: For power On and Off.
2. Jumper wires

## Embedded code implementation and architecture

This code implements a control system for a robotic platform using an mbed microcontroller. The platform is equipped with two wheels controlled by pulse-width modulation (**PWM**) signals. Additionally, it features sensors for detecting infrared (**IR**) signals and a **Bluetooth** module for wireless communication control.

### Coding related to Hardware components

To control the Motors (H-Bridge) of our robot we used PWM signals which are generated by **PwmOut** Classes. 2 Pins are used to control the right and left wheels, respectively. The direction of rotation for each motor is controlled by setting digital output pins (IN_1, IN_2, IN_3, IN_4) accordingly with **DigitalOut** classes.

Three analog infrared sensors (IrSensor_F, IrSensor_L, IrSensor_R) are used to read the distance of the obstacles using **AnalogIn** classes. 

The Bluetooth module is used to communicate with the system via a Bluetooth terminal using UART Serial communication with **Serial** Classes.

### Software components 

**The main** houses the robot's primary control loop. 
The system operates autonomously by continuously reading sensor values and performing corresponding movements. The main loop processes sensor readings to determine the presence of obstacles. Based on sensor readings, movement flags are assigned to the ISR to handle.

**Bluetooth control** 
 The control mode is a loop within the main loop that is triggered when a character is received. This loop handles Bluetooth reading and executing commands. Characters received via Bluetooth generate specific movement commands, allowing for remote control of the robot. Furthermore, a specific character is set in such a way that if this character is received, the control mode loop is exited, and the main loop of the autonomous mode will be functional again. 

**Interrupt service Routine**
An interrupt service routine is triggered periodically by a timer (timer) at regular intervals. This ISR checks for movement updates ensuring timely execution of movements without blocking the main loop.

**Movement Functions**
 Move_Forward, Stop, Take_turn, Turn_Left, Turn_Right, Curve_Left, and Curve_Right are used to control various types of movements, including straight, turning, and curved movements.

 **Custom Lib/Class Creation**
A custom Class was designed by us for the movement Function mentioned above. The name of the Class is **ESPRobot** including **ESPRobot.cpp** and **ESPRobot.h** that were added in the source files with the main.cpp. A new object named **robot** of the class ESPRobot was instantiated and every movement function is declared as a method in the class. Furthermore, this class was created to reduce complexity of the main code.

## System Evaluation
The designed two-wheel drive robot car successfully demonstrates the features of autonomous obstacle avoidance and manual control using wireless communication. Three IR sensors at the front calculate the distance and STM32 Nucleo target board controls speed and directions of the DC motors of the wheels. When the Bluetooth module installed on the robot receives a specific command from the user, it sends the signal to the microcontroller and the autonomous mode shifts into manual driving mode. In this mode, functions for example move forward, backward, left, right can be done by sending the commands via android Bluetooth serial terminal application by the user.  Further mode change form manual to autonomous can be done by sending the command using same application.

### Challenges -
 Initially, this project was intended to use a four-wheel drive structure with four separate DC motors for each wheel. The source of power was 6 AAA batteries. However, the robot was draining the batteries within 5 â€“ 10 minutes. This is because of four DC motors operating at a same time and limited current capacities of the batteries. Also, due to weight of them, the robot was unnecessarily heavy. Furthermore, it was challenging to manage the direction of each motor. 

### Addressing the challenges -
 To address these problems, we replaced the chassis of the robot to two-wheel drive which was light-weight and with just two DC motors on rear side and one cattle eye wheel at front. This significantly reduced the power consumption. Also, we replaced AAA batteries with two powerful 18650 rechargeable batteries. This resolved the issue of quick draining of power and enhanced the long-time operation of the robot.

### Further improvements -  
We selected IR sensors because of there simplicity of implementation and programming as well. For more sensor accuracy, these can be replaced by ultrasonic ranging sensors to give accurate distance measurements. The cattle eye wheel is not a suitable choice as a front wheel. It is difficult for the robot to move in straight line due to small sizes of the wheel. This can be fixed if the wheel is replaced by a medium sized caster wheel. Also, replacement of Bluetooth module with WIFI module can increase the accuracy of communication and can further enable features such as control from long range and cloud storage of the sensor values.

## Project video Link - 
https://1drv.ms/v/s!AscT4KIJYjiHhBeVh-RqTCki-xL3?e=IbpCn1
